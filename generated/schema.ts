// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Case extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Case entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Case must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Case", id.toString(), this);
    }
  }

  static load(id: string): Case | null {
    return changetype<Case | null>(store.get("Case", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get party1(): Bytes {
    let value = this.get("party1");
    return value!.toBytes();
  }

  set party1(value: Bytes) {
    this.set("party1", Value.fromBytes(value));
  }

  get party2(): Bytes {
    let value = this.get("party2");
    return value!.toBytes();
  }

  set party2(value: Bytes) {
    this.set("party2", Value.fromBytes(value));
  }

  get judge(): Bytes {
    let value = this.get("judge");
    return value!.toBytes();
  }

  set judge(value: Bytes) {
    this.set("judge", Value.fromBytes(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get decisionMaker(): Bytes {
    let value = this.get("decisionMaker");
    return value!.toBytes();
  }

  set decisionMaker(value: Bytes) {
    this.set("decisionMaker", Value.fromBytes(value));
  }

  get winner(): Bytes {
    let value = this.get("winner");
    return value!.toBytes();
  }

  set winner(value: Bytes) {
    this.set("winner", Value.fromBytes(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get tags(): Array<string> {
    let value = this.get("tags");
    return value!.toStringArray();
  }

  set tags(value: Array<string>) {
    this.set("tags", Value.fromStringArray(value));
  }

  get caseRuling(): string {
    let value = this.get("caseRuling");
    return value!.toString();
  }

  set caseRuling(value: string) {
    this.set("caseRuling", Value.fromString(value));
  }
}
